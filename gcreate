#!/bin/bash

#############################################
#	AUTHOR 	   : SACHIN		    #
#	MAIL	   : sachinsacc@live.in	    #
#	CREATED ON : 2014 July 25	    #
#	PLACE	   : Cubet Technolabs	    #
#############################################


JQ=`which jq`
GIT=`which git`
CURL=`which curl`
FILE="/home/$USER/temp.txt"
LOGIN="http://192.168.1.96/api/v3/session"
CREATEREPO="http://192.168.1.96/api/v3/projects"


clear


#Checking commands

	if [ ! -e "$GIT" ]; then
                echo -e "'git' command does not exist.Use 'sudo apt-get install git' to install.\n"
		exit
        fi
	if [ ! -e "$CURL" ]; then
		echo -e "'curl' command  does not exist.Use 'sudo apt-get install curl' to install.\n"
		exit
	fi
	if [ ! -e "$JQ" ]; then
		echo -e "'jq' command does not exist.Use 'sudo apt-get install jq' to install.\n"
		exit
        fi



#Entering credentials

echo -en "\nEnter Email ID for GITLAB  : "
read USER
stty -echo
echo -n "Enter your GITLAB Password : "
read PASSWORD
stty echo
echo -en "\nEnter Repository Name [Do not use '.'] : "
read REPO


# Checking input

echo "$REPO" | grep -q "\."

        if [ $? -eq 0 ]; then
                echo -e "\nERROR : Repository name contains '.'"
                exit;
        fi

	if [ "$REPO" = "" ]
	then
    		echo "ERROR : Please provide repository name."
		exit;
	else
		 echo "$RERO"
	fi


#Check cloning directory

ERR="y"
	while [ "$ERR" = "y" ]
	do
		echo -n "Provide an empty directory path to clone repository :"
		read DIR
				if ! [ -d $DIR ]; then
				if ! mkdir $DIR 2>/dev/null
				then
				echo -e "\nERROR : Unable to create '$DIR' : Permission denied."
				exit;
				else
    				echo -e "$DIR created."
				fi
			fi
			if [ "$(ls -A $DIR)" ]; then
        			echo -e "ERROR : $DIR is not Empty....!\n"
        			ERR="y"
			else
				ERR="n"
			fi
 	 done



#Logging in to GITLAB to get private token

$CURL 2>/dev/null -d "email=$USER&password=$PASSWORD" "$LOGIN" | $JQ '.private_token' > $FILE
TOKEN=$(tr -d '"' < $FILE)

	if [ "$TOKEN" = "null" ]; then
		echo -e "\nERROR : Invalied Username or Password.\n"
		exit; 
	else
		echo "GITLAB Login success."
	fi



#Checking project name and Creating project

$CURL -s -o $FILE --header "PRIVATE-TOKEN: $TOKEN" --data "name=$REPO&public=false" "$CREATEREPO" 2>/dev/null

cat $FILE | grep 404 >/dev/null
	if [ $? -eq 0 ]
	then
		echo -e "\nEROR : Repository name already exists."
		exit;
	else
		echo "Repository '$REPO' created"
	fi

URL=$(cat $FILE | $JQ '.ssh_url_to_repo' | tr -d '"')
PROJECTID=$(cat $FILE | $JQ '.id' | tr -d '"')



#Creating and pushing README.md into repository

cd $DIR
		if ! git init >/dev/null
		then
		echo -e "\nERROR:Unable to create '.git' at $DIR : Permission denied"
		exit;
		fi
touch README.md
echo -en "\nWould you like to add Project details in README.md (y/n) : "
read README
		if [ "$README" = "y" ]
		then
		nano README.md
		else
		echo -e "No content added to README.md\n"
		fi
echo "Creating branches..."
git add README.md
git commit -m 'Initial commit' >/dev/null
git remote add origin $URL
git push origin master 2>/dev/null

echo "Master branch created"


#Creating Branches

CREATEBRANCH="$CREATEREPO/$PROJECTID/repository/branches"

curl -s -o $FILE --header "PRIVATE-TOKEN: $TOKEN" --data "id=$PROJECTID&branch_name=code&ref=master" "$CREATEBRANCH" 2>/dev/null
echo -e "Branch 'code' created"
curl -s -o $FILE --header "PRIVATE-TOKEN: $TOKEN" --data "id=$PROJECTID&branch_name=design&ref=master" "$CREATEBRANCH" 2>/dev/null
echo -e "Branch 'design' created"
curl -s -o $FILE --header "PRIVATE-TOKEN: $TOKEN" --data "id=$PROJECTID&branch_name=testing&ref=master" "$CREATEBRANCH" 2>/dev/null
echo -e "Branch 'testing' created"

#Pulling the branches
echo "Pulling the branches..."
git pull 2>/dev/null


#checkout the branch

check_branch(){
ERROR="y"
while [ "$ERROR" = "y" ]
do
echo -en "Enter the branch name (code/design/testing) : "
read BRANCHNAME
		if [ "$BRANCHNAME" = "code" ]; then
		git checkout code
		ERROR="n"
		elif [ "$BRANCHNAME" = "design" ]; then
		git checkout design
		ERROR="n"
		elif [ "$BRANCHNAME" = "testing" ]; then
		git checkout testing
		ERROR="n"
		else
		echo "ERROR: No such branch, enter a valid branch name."
		ERROR="y"
		fi
done

}
 
echo -en "\nWould you like to change the branch now (y/n)? : "
read BRANCH
		if [ "$BRANCH" = "y" ]
		then
		check_branch
		echo ""
		else
		echo -e "Project layout created successfully.\n"
		exit;
		fi


#removing temporary file
rm -rf $FILE


